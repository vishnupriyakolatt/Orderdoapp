import{createHmac,randomBytes}from"crypto";const IV=randomBytes(16);export const _hashSizes={md5:16,sha1:20,sha256:32,sha512:64};export function sign(e,t,r=-1,s="sha512"){"string"==typeof e&&(e=Buffer.from(e,"utf8"));const o=_hashSizes[s],a=o+8,c=Buffer.allocUnsafe(a+e.length);c.writeDoubleLE(r,o),e.copy(c,a);const f=createHmac(s,t);return f.update(c.slice(o)),f.digest().copy(c),c}export function verify(e,t,r="sha512"){"string"==typeof e&&(e=Buffer.from(e,"base64url"));var s=_hashSizes[r],o=e.slice(0,s);const a=e.readDoubleLE(s),c=createHmac(r,t);return c.update(e.slice(s)),{isValid:0===c.digest().compare(o),expires:a,data:e.slice(s+8)}}export function hash(e,t,r="sha512"){"string"==typeof e&&(e=Buffer.from(e,"utf8"));const s=createHmac(r,t);return s.update(e),s.digest()}export function crc1(e){"string"==typeof e&&(e=Buffer.from(e));var t=0;for(let r=0,s=e.length;r<s;++r)t+=e[r];return 255&t}